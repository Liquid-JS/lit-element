{"version":3,"file":"decorators.js","sourceRoot":"","sources":["../src/lib/decorators.ts"],"names":[],"mappings":"AACA;;;;;;;;;;;;GAYG;AAUH;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,OAAoC,EAAE,EAAE,CAClE,CAAC,KAA+B,EAAE,EAAE;IAClC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC7C,sEAAsE;IACtE,wDAAwD;IACxD,yEAAyE;IACzE,wEAAwE;IACxE,OAAO,KAAY,CAAC;AACtB,CAAC,CAAC;AAEN;;;;GAIG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,OAA6B,EAAE,EAAE,CAAC,CAAC,KAAa,EACb,IAAY,EAAE,EAAE;IACzE,KAAK,CAAC,WAAsC,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC9E,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,MAAoB,EAAE,QAAgB,EAAE,EAAE,CACvC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;AAEhE;;;GAGG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,MAAoB,EAAE,QAAgB,EAAE,EAAE,CACvC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;AAEtE;;;;;GAKG;AACH,SAAS,MAAM,CAAI,OAAsD;IACvE,OAAO,CAAC,QAAgB,EAAE,EAAE,CAAC,CAAC,KAAU,EAAE,QAAgB,EAAE,EAAE;QAC5D,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,EAAE;YACrC,GAAG,KAAqB,OAAO,OAAO,CAAC,IAAI,CAAC,UAAW,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;YACrE,UAAU,EAAG,IAAI;YACjB,YAAY,EAAG,IAAI;SACpB,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC","sourcesContent":["\r\n/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\nimport {LitElement} from '../lit-element.js';\r\n\r\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\r\n\r\nexport type Constructor<T> = {\r\n  new (...args: unknown[]): T\r\n};\r\n\r\n/**\r\n * Class decorator factory that defines the decorated class as a custom element.\r\n *\r\n * @param tagName the name of the custom element to define\r\n *\r\n * In TypeScript, the `tagName` passed to `customElement` must be a key of the\r\n * `HTMLElementTagNameMap` interface. To add your element to the interface,\r\n * declare the interface in this module:\r\n *\r\n *     @customElement('my-element')\r\n *     export class MyElement extends LitElement {}\r\n *\r\n *     declare global {\r\n *       interface HTMLElementTagNameMap {\r\n *         'my-element': MyElement;\r\n *       }\r\n *     }\r\n *\r\n */\r\nexport const customElement = (tagName: keyof HTMLElementTagNameMap) =>\r\n    (clazz: Constructor<HTMLElement>) => {\r\n      window.customElements.define(tagName, clazz);\r\n      // Cast as any because TS doesn't recognize the return type as being a\r\n      // subtype of the decorated class when clazz is typed as\r\n      // `Constructor<HTMLElement>` for some reason. `Constructor<HTMLElement>`\r\n      // is helpful to make sure the decorator is applied to elements however.\r\n      return clazz as any;\r\n    };\r\n\r\n/**\r\n * A property decorator which creates a LitElement property which reflects a\r\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\r\n * supplied to configure property features.\r\n */\r\nexport const property = (options?: PropertyDeclaration) => (proto: Object,\r\n                                                            name: string) => {\r\n  (proto.constructor as typeof UpdatingElement).createProperty(name, options);\r\n};\r\n\r\n/**\r\n * A property decorator that converts a class property into a getter that\r\n * executes a querySelector on the element's renderRoot.\r\n */\r\nexport const query = _query((target: NodeSelector, selector: string) =>\r\n                                target.querySelector(selector));\r\n\r\n/**\r\n * A property decorator that converts a class property into a getter\r\n * that executes a querySelectorAll on the element's renderRoot.\r\n */\r\nexport const queryAll = _query((target: NodeSelector, selector: string) =>\r\n                                   target.querySelectorAll(selector));\r\n\r\n/**\r\n * Base-implementation of `@query` and `@queryAll` decorators.\r\n *\r\n * @param queryFn exectute a `selector` (ie, querySelector or querySelectorAll)\r\n * against `target`.\r\n */\r\nfunction _query<T>(queryFn: (target: NodeSelector, selector: string) => T) {\r\n  return (selector: string) => (proto: any, propName: string) => {\r\n    Object.defineProperty(proto, propName, {\r\n      get(this: LitElement) { return queryFn(this.renderRoot!, selector); },\r\n      enumerable : true,\r\n      configurable : true,\r\n    });\r\n  };\r\n}\r\n"]}